syntax = "proto3";

package yandex.cloud.k8s.v1;

import "google/protobuf/timestamp.proto";

import "yandex/cloud/k8s/v1/maintenance.proto";
import "yandex/cloud/k8s/v1/version.proto";
import "yandex/cloud/validation.proto";

option go_package = "github.com/yandex-cloud/go-genproto/yandex/cloud/k8s/v1;k8s";
option java_package = "yandex.cloud.api.k8s.v1";

message NodeGroup {
  enum Status {
    STATUS_UNSPECIFIED = 0;

    // Node group is waiting for resources to be allocated.
    PROVISIONING = 1;

    // Node group is running.
    RUNNING = 2;

    // Node group is waiting for some work to be done, such as upgrading node software.
    RECONCILING = 3;

    // Node group is being stopped.
    STOPPING = 4;

    // Node group stopped.
    STOPPED = 5;

    // Node group is being deleted.
    DELETING = 6;

    // Node group is being started.
    STARTING = 7;
  }

  // ID of the node group.
  string id = 1;

  // ID of the cluster that the node group belongs to.
  string cluster_id = 2;

  // Creation timestamp.
  google.protobuf.Timestamp created_at = 3;

  // Name of the node group.
  // The name is unique within the folder.
  string name = 4;

  // Description of the node group. 0-256 characters long.
  string description = 5;

  // Resource labels as `key:value` pairs. Ðœaximum of 64 per resource.
  map<string, string> labels = 6;

  // Status of the node group.
  Status status = 7;

  // Node template that specifies parameters of the compute instances for the node group.
  NodeTemplate node_template = 8;

  // Scale policy of the node group.  For more information, see [Scaling policy](/docs/compute/concepts/instance-groups/policies#scale-policy).
  ScalePolicy scale_policy = 9;

  // Allocation policy by which resources for node group are allocated to zones and regions.
  NodeGroupAllocationPolicy allocation_policy = 10;

  // ID of the managed instance group associated with this node group.
  string instance_group_id = 11;

  // Version of Kubernetes components that runs on the nodes.
  // Deprecated. Use version_info.current_version.
  string node_version = 12;

  VersionInfo version_info = 13;

  NodeGroupMaintenancePolicy maintenance_policy = 14;
}

message NodeTemplate {
  // ID of the hardware platform configuration for the node.
  string platform_id = 1;

  // Computing resources of the node such as the amount of memory and number of cores.
  ResourcesSpec resources_spec = 2;

  // Specification for the boot disk that will be attached to the node.

  // The metadata as `key:value` pairs assigned to this instance template. This includes custom metadata and predefined keys.
  //
  // For example, you may use the metadata in order to provide your public SSH key to the node.
  // For more information, see [Metadata](/docs/compute/concepts/vm-metadata).
  DiskSpec boot_disk_spec = 3;
  map<string, string> metadata = 4 [(size) = "<=64", (length) = "<=131072", (map_key).length = "1-63", (map_key).pattern = "[a-z][-_0-9a-z]*"];

  // Specification for the create network interfaces for the node group compute instances.
  NodeAddressSpec v4_address_spec = 5;

  // Scheduling policy configuration.
  SchedulingPolicy scheduling_policy = 6;
}

message NodeAddressSpec {
  // One-to-one NAT configuration. Setting up one-to-one NAT ensures that public IP addresses are assigned to nodes, and therefore internet is accessible for all nodes of the node group. If the field is not set, NAT will not be set up.
  OneToOneNatSpec one_to_one_nat_spec = 1;
}

message OneToOneNatSpec {
  // IP version for the public IP address.
  IpVersion ip_version = 1;
}

enum IpVersion {
  IP_VERSION_UNSPECIFIED = 0;

  // IPv4 address, for example 192.168.0.0.
  IPV4 = 1;

  // IPv6 address, not available yet.
  IPV6 = 2;
}

message ResourcesSpec {
  // Amount of memory available to the node, specified in bytes.
  int64 memory = 1 [(value) = "0-274877906944"];

  // Number of cores available to the node.
  int64 cores = 2 [(value) = "0,1,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32"];

  // Baseline level of CPU performance with the possibility to burst performance above that baseline level.
  // This field sets baseline performance for each core.
  int64 core_fraction = 3 [(value) = "0,5,20,50,100"];
}

message DiskSpec {
  // ID of the disk type.
  string disk_type_id = 1 [(pattern) = "|network-ssd|network-hdd"];

  // Size of the disk, specified in bytes.
  int64 disk_size = 2 [(value) = "0-4398046511104"];
}

message ScalePolicy {
  oneof scale_type {
    option (exactly_one) = true;
    // Fixed scale policy of the node group.
    FixedScale fixed_scale = 1;
  }

  message FixedScale {
    // Number of nodes in the node group.
    int64 size = 1 [(value) = "0-100"];
  }
}

message NodeGroupAllocationPolicy {
  // List of locations where resources for the node group will be allocated.
  repeated NodeGroupLocation locations = 1;
}

message NodeGroupLocation {
  // ID of the availability zone where the nodes may reside.
  string zone_id = 1 [(required) = true];

  // ID of the subnet. If a network chosen for the Kubernetes cluster has only one subnet in the specified zone, subnet ID may be omitted.
  string subnet_id = 2;
}

message SchedulingPolicy {
  // True for preemptible compute instances. Default value is false. Preemptible compute instances are stopped at least once every 24 hours, and can be stopped at any time
  // if their resources are needed by Compute.
  // For more information, see [Preemptible Virtual Machines](/docs/compute/concepts/preemptible-vm).
  bool preemptible = 1;
}

message NodeGroupMaintenancePolicy {
  bool auto_upgrade = 1;
  bool auto_repair = 2;

  MaintenanceWindow maintenance_window = 3;
}
